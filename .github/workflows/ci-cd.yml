name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd app
        pip install -r requirements.txt
    
    - name: Train model
      run: |
        cd app
        python train_model.py
    
    - name: Test Flask app
      run: |
        cd app
        python -c "import app; print('Flask app imports successfully')"
    
    - name: Test model loading
      run: |
        cd app
        python -c "import joblib; model = joblib.load('model.pkl'); print('Model loaded successfully')"

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t health-predictor:${{ github.sha }} .
        docker build -t health-predictor:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm health-predictor:latest python -c "import app; print('Docker image works')"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # kubectl apply -f k8s/
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add your smoke test commands here
